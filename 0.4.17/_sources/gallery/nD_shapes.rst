
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/nD_shapes.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_nD_shapes.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_nD_shapes.py:


nD shapes
=========

Display one 4-D image layer using the ``add_image`` API

.. tags:: visualization-nD

.. GENERATED FROM PYTHON SOURCE LINES 9-60



.. image-sg:: /gallery/images/sphx_glr_nD_shapes_001.png
   :alt: nD shapes
   :srcset: /gallery/images/sphx_glr_nD_shapes_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    sliced: nshapes 128, mask shape (128, 128, 128, 128), labels_shape (128, 128, 128), array_shape, (128, 5, 3)
    broadcast: nshapes 1, mask shape (1, 128, 128), labels_shape (128, 128), array_shape, (1, 4, 2)






|

.. code-block:: default


    import numpy as np
    from skimage import data
    import napari


    blobs = data.binary_blobs(
        length=128, blob_size_fraction=0.05, n_dim=3, volume_fraction=0.1
    ).astype(float)

    viewer = napari.view_image(blobs.astype(float))

    # create one random polygon per "plane"
    planes = np.tile(np.arange(128).reshape((128, 1, 1)), (1, 5, 1))
    np.random.seed(0)
    corners = np.random.uniform(0, 128, size=(128, 5, 2))
    shapes = np.concatenate((planes, corners), axis=2)

    base_cols = ['red', 'green', 'blue', 'white', 'yellow', 'magenta', 'cyan']
    colors = np.random.choice(base_cols, size=128)

    layer = viewer.add_shapes(
        np.array(shapes),
        shape_type='polygon',
        face_color=colors,
        name='sliced',
    )

    masks = layer.to_masks(mask_shape=(128, 128, 128))
    labels = layer.to_labels(labels_shape=(128, 128, 128))
    shape_array = np.array(layer.data)

    print(
        f'sliced: nshapes {layer.nshapes}, mask shape {masks.shape}, '
        f'labels_shape {labels.shape}, array_shape, {shape_array.shape}'
    )

    corners = np.random.uniform(0, 128, size=(2, 2))
    layer = viewer.add_shapes(corners, shape_type='rectangle', name='broadcasted')

    masks = layer.to_masks(mask_shape=(128, 128))
    labels = layer.to_labels(labels_shape=(128, 128))
    shape_array = np.array(layer.data)

    print(
        f'broadcast: nshapes {layer.nshapes}, mask shape {masks.shape}, '
        f'labels_shape {labels.shape}, array_shape, {shape_array.shape}'
    )

    if __name__ == '__main__':
        napari.run()


.. _sphx_glr_download_gallery_nD_shapes.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: nD_shapes.py <nD_shapes.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: nD_shapes.ipynb <nD_shapes.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
