
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/tracks_3d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_tracks_3d.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_tracks_3d.py:


Tracks 3D
=========

.. tags:: visualization-advanced

.. GENERATED FROM PYTHON SOURCE LINES 7-79



.. image-sg:: /gallery/images/sphx_glr_tracks_3d_001.png
   :alt: tracks 3d
   :srcset: /gallery/images/sphx_glr_tracks_3d_001.png
   :class: sphx-glr-single-img





.. code-block:: default


    import napari
    import numpy as np


    def lissajous(t):
        a = np.random.random(size=(3,)) * 80.0 - 40.0
        b = np.random.random(size=(3,)) * 0.05
        c = np.random.random(size=(3,)) * 0.1
        return (a[i] * np.cos(b[i] * t + c[i]) for i in range(3))


    def tracks_3d(num_tracks=10):
        """ create 3d+t track data """
        tracks = []

        for track_id in range(num_tracks):

            # space to store the track data and features
            track = np.zeros((200, 10), dtype=np.float32)

            # time
            timestamps = np.arange(track.shape[0])
            x, y, z = lissajous(timestamps)

            track[:, 0] = track_id
            track[:, 1] = timestamps
            track[:, 2] = 50.0 + z
            track[:, 3] = 50.0 + y
            track[:, 4] = 50.0 + x

            # calculate the speed as a feature
            gz = np.gradient(track[:, 2])
            gy = np.gradient(track[:, 3])
            gx = np.gradient(track[:, 4])

            speed = np.sqrt(gx ** 2 + gy ** 2 + gz ** 2)
            distance = np.sqrt(x ** 2 + y ** 2 + z ** 2)

            track[:, 5] = gz
            track[:, 6] = gy
            track[:, 7] = gx
            track[:, 8] = speed
            track[:, 9] = distance

            tracks.append(track)

        tracks = np.concatenate(tracks, axis=0)
        data = tracks[:, :5]  # just the coordinate data

        features = {
            'time': tracks[:, 1],
            'gradient_z': tracks[:, 5],
            'gradient_y': tracks[:, 6],
            'gradient_x': tracks[:, 7],
            'speed': tracks[:, 8],
            'distance': tracks[:, 9],
        }

        graph = {}
        return data, features, graph


    tracks, features, graph = tracks_3d(num_tracks=100)
    vertices = tracks[:, 1:]

    viewer = napari.Viewer(ndisplay=3)
    viewer.add_points(vertices, size=1, name='points', opacity=0.3)
    viewer.add_tracks(tracks, features=features, name='tracks')

    if __name__ == '__main__':
        napari.run()


.. _sphx_glr_download_gallery_tracks_3d.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tracks_3d.py <tracks_3d.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tracks_3d.ipynb <tracks_3d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
