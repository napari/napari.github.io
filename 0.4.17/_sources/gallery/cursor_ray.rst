
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/cursor_ray.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_cursor_ray.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_cursor_ray.py:


Cursor ray
==========

Depict a ray through a layer in 3D to demonstrate interactive 3D functionality

.. tags:: interactivity

.. GENERATED FROM PYTHON SOURCE LINES 9-67



.. image-sg:: /gallery/images/sphx_glr_cursor_ray_001.png
   :alt: cursor ray
   :srcset: /gallery/images/sphx_glr_cursor_ray_001.png
   :class: sphx-glr-single-img





.. code-block:: default

    import numpy as np
    import napari

    sidelength_data = 64
    n_points = 10

    # data to depict an empty volume, its bounding box and points along a ray
    # through the volume
    volume = np.zeros(shape=(sidelength_data, sidelength_data, sidelength_data))
    bounding_box = np.array(
        [
            [0, 0, 0],
            [1, 0, 0],
            [0, 1, 0],
            [1, 1, 0],
            [0, 0, 1],
            [1, 0, 1],
            [0, 1, 1],
            [1, 1, 1],
        ]
    ) * sidelength_data
    points = np.zeros(shape=(n_points, 3))

    # point sizes
    point_sizes = np.linspace(0.5, 2, n_points, endpoint=True)

    # point colors
    green = [0, 1, 0, 1]
    magenta = [1, 0, 1, 1]
    point_colors = np.linspace(green, magenta, n_points, endpoint=True)

    # create viewer and add layers for each piece of data
    viewer = napari.Viewer(ndisplay=3)
    bounding_box_layer = viewer.add_points(
        bounding_box, face_color='cornflowerblue', name='bounding box'
    )
    ray_layer = viewer.add_points(
        points, face_color=point_colors, size=point_sizes, name='cursor ray'
    )
    volume_layer = viewer.add_image(volume, blending='additive')


    # callback function, called on mouse click when volume layer is active
    @volume_layer.mouse_drag_callbacks.append
    def on_click(layer, event):
        near_point, far_point = layer.get_ray_intersections(
            event.position,
            event.view_direction,
            event.dims_displayed
        )
        if (near_point is not None) and (far_point is not None):
            ray_points = np.linspace(near_point, far_point, n_points, endpoint=True)
            if ray_points.shape[1] != 0:
                ray_layer.data = ray_points


    if __name__ == '__main__':
        napari.run()


.. _sphx_glr_download_gallery_cursor_ray.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: cursor_ray.py <cursor_ray.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: cursor_ray.ipynb <cursor_ray.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
