
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/nD_points_with_features.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_nD_points_with_features.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_nD_points_with_features.py:


nD points with features
=======================

Display one points layer ontop of one 4-D image layer using the
add_points and add_image APIs, where the markes are visible as nD objects
across the dimensions, specified by their size

.. tags:: visualization-nD

.. GENERATED FROM PYTHON SOURCE LINES 11-59



.. image-sg:: /gallery/images/sphx_glr_nD_points_with_features_001.png
   :alt: nD points with features
   :srcset: /gallery/images/sphx_glr_nD_points_with_features_001.png
   :class: sphx-glr-single-img





.. code-block:: default


    import numpy as np
    from skimage import data
    import napari


    blobs = data.binary_blobs(
        length=100, blob_size_fraction=0.05, n_dim=3, volume_fraction=0.05
    )
    viewer = napari.view_image(blobs.astype(float))

    # create the points
    points = []
    for z in range(blobs.shape[0]):
        points += [[z, 25, 25], [z, 25, 75], [z, 75, 25], [z, 75, 75]]

    # create the features for setting the face and edge color.
    face_feature = np.array(
        [True, True, True, True, False, False, False, False]
        * int(blobs.shape[0] / 2)
    )
    edge_feature = np.array(['A', 'B', 'C', 'D', 'E'] * int(len(points) / 5))

    features = {
        'face_feature': face_feature,
        'edge_feature': edge_feature,
    }

    points_layer = viewer.add_points(
        points,
        features=features,
        size=3,
        edge_width=5,
        edge_width_is_relative=False,
        edge_color='edge_feature',
        face_color='face_feature',
        out_of_slice_display=False,
    )

    # change the face color cycle
    points_layer.face_color_cycle = ['white', 'black']

    # change the edge_color cycle.
    # there are 4 colors for 5 categories, so 'c' will be recycled
    points_layer.edge_color_cycle = ['c', 'm', 'y', 'k']

    if __name__ == '__main__':
        napari.run()


.. _sphx_glr_download_gallery_nD_points_with_features.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: nD_points_with_features.py <nD_points_with_features.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: nD_points_with_features.ipynb <nD_points_with_features.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
